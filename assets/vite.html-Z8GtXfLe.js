import{_ as t,r as p,o as e,c as o,d as n,e as s,b as c,a as i}from"./app-Js4EkCke.js";const l={},u=n("h1",{id:"vite",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#vite"},[n("span",null,"Vite")])],-1),r={class:"custom-container danger"},d=n("p",{class:"custom-container-title"},"警告",-1),k=n("p",null,"在正式版中接入vite子应用需要关闭沙箱，这会导致很多问题，暂时不建议接入。",-1),v={href:"https://micro-zoe.com/docs/1.x/#/zh-cn/start",target:"_blank",rel:"noopener noreferrer"},m=i(`<h2 id="作为基座应用" tabindex="-1"><a class="header-anchor" href="#作为基座应用"><span>作为基座应用</span></a></h2><p>vite作为基座应用时没有特殊之处，具体方式参考各框架接入文档。</p><h2 id="作为子应用" tabindex="-1"><a class="header-anchor" href="#作为子应用"><span>作为子应用</span></a></h2><p>当子应用是vite应用时需要做特别的适配，适配vite的代价是巨大的，我们必须关闭沙箱功能，因为沙箱在<code>module script</code>下不支持，这导致大部分功能失效，包括：环境变量、样式隔离、元素隔离、资源路径补全、baseroute 等。</p><p>在嵌入vite子应用时，<code>micro-app</code>的功能只负责渲染，其它的行为由应用自行决定，这包括如何防止样式、JS变量、元素的冲突。</p><p>在module模式下，引入的资源大多为相对地址，兼容主要做的事情就是将地址补全。</p><h3 id="👇-子应用的修改" tabindex="-1"><a class="header-anchor" href="#👇-子应用的修改"><span>👇 子应用的修改</span></a></h3><p><strong>1、修改vite.config.js</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> join <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;path&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> writeFileSync <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;fs&#39;</span>

<span class="token comment">// vite.config.js</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">base</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">&#39;production&#39;</span> <span class="token operator">?</span> <span class="token string">&#39;http://my-site.com&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/basename/</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token comment">// 自定义插件</span>
    <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> basePath <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;vite:micro-app&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">apply</span><span class="token operator">:</span> <span class="token string">&#39;build&#39;</span><span class="token punctuation">,</span>
        <span class="token function">configResolved</span><span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          basePath <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>config<span class="token punctuation">.</span>base<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>config<span class="token punctuation">.</span>build<span class="token punctuation">.</span>assetsDir<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token template-punctuation string">\`</span></span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token function">writeBundle</span> <span class="token punctuation">(</span><span class="token parameter">options<span class="token punctuation">,</span> bundle</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> chunkName <span class="token keyword">in</span> bundle<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>bundle<span class="token punctuation">,</span> chunkName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token keyword">const</span> chunk <span class="token operator">=</span> bundle<span class="token punctuation">[</span>chunkName<span class="token punctuation">]</span>
              <span class="token keyword">if</span> <span class="token punctuation">(</span>chunk<span class="token punctuation">.</span>fileName <span class="token operator">&amp;&amp;</span> chunk<span class="token punctuation">.</span>fileName<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&#39;.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                chunk<span class="token punctuation">.</span>code <span class="token operator">=</span> chunk<span class="token punctuation">.</span>code<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(from|import\\()(\\s*[&#39;&quot;])(\\.\\.?\\/)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">all<span class="token punctuation">,</span> $1<span class="token punctuation">,</span> $2<span class="token punctuation">,</span> $3</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                  <span class="token keyword">return</span> all<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>$3<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>$3<span class="token punctuation">,</span> basePath<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span>
                <span class="token keyword">const</span> fullPath <span class="token operator">=</span> <span class="token function">join</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>dir<span class="token punctuation">,</span> chunk<span class="token punctuation">.</span>fileName<span class="token punctuation">)</span>
                <span class="token function">writeFileSync</span><span class="token punctuation">(</span>fullPath<span class="token punctuation">,</span> chunk<span class="token punctuation">.</span>code<span class="token punctuation">)</span>
              <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2、修改容器元素id</strong></p><p>因为vite子应用没有元素隔离的保护，建议修改容器元素的id值，以确保与其它元素不冲突。</p><p><em>1、修改index.html中容器元素的id值</em></p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token comment">&lt;!-- index.html --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>my-vite-app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em>2、使用新的id渲染</em></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// main.js</span>
<span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">&#39;#my-vite-app&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>当多个vite子应用同时渲染时，必须修改容器元素的id值，确保每个子应用容器元素id的唯一性，否则无法正常渲染。</p><p><strong>3、路由</strong></p><p>推荐基座使用history路由，vite子应用使用hash路由，避免一些可能出现的问题。</p><p>子应用如果是vue3，在初始化时路由时，createWebHashHistory不要传入参数，如下：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createRouter<span class="token punctuation">,</span> createWebHashHistory <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue-router&#39;</span>

<span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">history</span><span class="token operator">:</span> <span class="token function">createWebHashHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  routes<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>4、静态资源</strong></p><p>图片等静态资源需要使用绝对地址，可以使用 <code>new URL(&#39;../assets/logo.png&#39;, import.meta.url).href</code> 等方式获取资源的全链接地址。</p><h3 id="👇-基座应用的修改" tabindex="-1"><a class="header-anchor" href="#👇-基座应用的修改"><span>👇 基座应用的修改</span></a></h3><p>注意这里的基座应用是指嵌入了vite子应用的基座，它可以是任何框架，和上面<code>作为基座应用</code>一节无关。</p><p><strong>1、关闭沙箱并使用内联script模式</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>micro<span class="token operator">-</span>app
  name<span class="token operator">=</span><span class="token string">&#39;child-name&#39;</span>
  url<span class="token operator">=</span><span class="token string">&#39;http://localhost:3001/basename/&#39;</span>
  inline <span class="token comment">// 使用内联script模式</span>
  disableSandbox <span class="token comment">// 关闭沙箱</span>
<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2、处理子应用静态资源</strong></p><p>写一个简易的插件，对开发环境的子应用进行处理，补全静态资源路径。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> microApp <span class="token keyword">from</span> <span class="token string">&#39;@micro-zoe/micro-app&#39;</span>

microApp<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">modules</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token comment">// appName即应用的name值</span>
      <span class="token literal-property property">appName</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
        <span class="token function">loader</span><span class="token punctuation">(</span><span class="token parameter">code</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">&#39;development&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 这里 basename 需要和子应用vite.config.js中base的配置保持一致</span>
            code <span class="token operator">=</span> code<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(from|import)(\\s*[&#39;&quot;])(\\/basename\\/)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token parameter">all</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
              <span class="token keyword">return</span> all<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&#39;/basename/&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;子应用域名/basename/&#39;</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
          <span class="token punctuation">}</span>

          <span class="token keyword">return</span> code
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="👇-数据通信" tabindex="-1"><a class="header-anchor" href="#👇-数据通信"><span>👇 数据通信</span></a></h3><p>沙箱关闭后，子应用默认的通信功能失效，此时可以通过手动注册通信对象实现一致的功能。</p><p><strong>注册方式：在基座应用中为子应用初始化通信对象</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> EventCenterForMicroApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@micro-zoe/micro-app&#39;</span>

<span class="token comment">// 注意：每个vite子应用根据appName单独分配一个通信对象</span>
window<span class="token punctuation">.</span>eventCenterForViteApp1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventCenterForMicroApp</span><span class="token punctuation">(</span>appName<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>vite子应用就可以通过注册的<code>eventCenterForViteApp1</code>对象进行通信，其api和<code>window.microApp</code>一致，<em>基座通信方式没有任何变化。</em></p><p><strong>子应用通信方式：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 绑定监听函数
 * dataListener: 绑定函数
 * autoTrigger: 在初次绑定监听函数时有缓存数据，是否需要主动触发一次，默认为false
 */</span>
window<span class="token punctuation">.</span>eventCenterForViteApp1<span class="token punctuation">.</span><span class="token function">addDataListener</span><span class="token punctuation">(</span><span class="token function-variable function">dataListener</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">data</span><span class="token operator">:</span> Object</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">,</span> autoTrigger<span class="token operator">?</span><span class="token operator">:</span> boolean<span class="token punctuation">)</span>

<span class="token comment">// 解绑指定函数</span>
window<span class="token punctuation">.</span>eventCenterForViteApp1<span class="token punctuation">.</span><span class="token function">removeDataListener</span><span class="token punctuation">(</span>dataListener<span class="token punctuation">)</span>

<span class="token comment">// 清空当前子应用的所有绑定函数(全局数据函数除外)</span>
window<span class="token punctuation">.</span>eventCenterForViteApp1<span class="token punctuation">.</span><span class="token function">clearDataListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 主动获取数据</span>
window<span class="token punctuation">.</span>eventCenterForViteApp1<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 子应用向基座应用发送数据</span>
window<span class="token punctuation">.</span>eventCenterForViteApp1<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;子应用发送的数据&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">注意</p><ol><li>请确保vite版本&gt;=2.5.0</li><li>适配vite本质上是适配module脚本，其它非vite构建的module脚本也可以采用相同的思路处理。</li></ol></div><h2 id="实战案例" tabindex="-1"><a class="header-anchor" href="#实战案例"><span>实战案例</span></a></h2><p>以上介绍了vite如何接入微前端，但在实际使用中会涉及更多功能，如数据通信、路由跳转、打包部署，为此我们提供了一套案例，用于展示vite作为基座嵌入(或作为子应用被嵌入) react、vue、angular、vite、nextjs、nuxtjs等框架，在案例中我们使用尽可能少的代码实现尽可能多的功能。</p><p>案例地址：https://github.com/micro-zoe/micro-app-demo-0.x</p>`,40);function b(g,h){const a=p("ExternalLinkIcon");return e(),o("div",null,[u,n("div",r,[d,k,n("p",null,[s("在1.0公测版中我们推出了为vite打造的沙箱方案，对于新接入的项目，推荐使用新的方案，具体详情请跳转"),n("a",v,[s("1.0公测版文档"),c(a)]),s("。")])]),m])}const y=t(l,[["render",b],["__file","vite.html.vue"]]);export{y as default};
