import{_ as l,r as e,o as r,c as u,b as a,w as t,d as n,e as s,a as o}from"./app-Js4EkCke.js";const d={},k=o(`<h1 id="react" tabindex="-1"><a class="header-anchor" href="#react"><span>React</span></a></h1><p>本篇以<code>React 16、17</code>作为案例介绍react的接入方式，其它版本react的接入方式以此类推。我们默认开发者掌握了各版本react的开发技巧，如示例中useEffect，在不支持hooks的版本中转换为componentDidMount。</p><h2 id="作为主应用" tabindex="-1"><a class="header-anchor" href="#作为主应用"><span>作为主应用</span></a></h2><h4 id="_1、安装依赖" tabindex="-1"><a class="header-anchor" href="#_1、安装依赖"><span>1、安装依赖</span></a></h4><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> i @micro-zoe/micro-app <span class="token parameter variable">--save</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2、初始化micro-app" tabindex="-1"><a class="header-anchor" href="#_2、初始化micro-app"><span>2、初始化micro-app</span></a></h4><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// index.js</span>
<span class="token keyword">import</span> microApp <span class="token keyword">from</span> <span class="token string">&#39;@micro-zoe/micro-app&#39;</span>

microApp<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3、在页面中嵌入子应用" tabindex="-1"><a class="header-anchor" href="#_3、在页面中嵌入子应用"><span>3、在页面中嵌入子应用</span></a></h4><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">MyPage</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>子应用👇<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>
      <span class="token comment">// name：应用名称, url：应用地址</span>
      <span class="token operator">&lt;</span>micro<span class="token operator">-</span>app name<span class="token operator">=</span><span class="token string">&#39;my-app&#39;</span> url<span class="token operator">=</span><span class="token string">&#39;http://localhost:3000/&#39;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>micro<span class="token operator">-</span>app<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container note"><p class="custom-container-title">Note</p><ol><li>name：必传参数，必须以字母开头，且不可以带特殊符号(中划线、下划线除外)</li><li>url：必传参数，必须指向子应用的index.html，如：http://localhost:3000/ 或 http://localhost:3000/index.html</li></ol></div><h2 id="作为子应用" tabindex="-1"><a class="header-anchor" href="#作为子应用"><span>作为子应用</span></a></h2><h4 id="_1、设置跨域支持" tabindex="-1"><a class="header-anchor" href="#_1、设置跨域支持"><span>1、设置跨域支持</span></a></h4><p>使用<code>create-react-app</code>脚手架创建的项目，在 <code>config/webpackDevServer.config.js</code> 文件中添加headers。</p><p>其它项目在<code>webpack-dev-server</code>中添加headers。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token string-property property">&#39;Access-Control-Allow-Origin&#39;</span><span class="token operator">:</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2、注册卸载函数" tabindex="-1"><a class="header-anchor" href="#_2、注册卸载函数"><span>2、注册卸载函数</span></a></h4><p>子应用卸载时会自动执行<code>window.unmount</code>，在此可以进行卸载相关操作。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// index.js</span>
window<span class="token punctuation">.</span><span class="token function-variable function">unmount</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  ReactDOM<span class="token punctuation">.</span><span class="token function">unmountComponentAtNode</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;root&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>完成以上步骤微前端即可正常渲染。</p><h3 id="可选设置" tabindex="-1"><a class="header-anchor" href="#可选设置"><span>可选设置</span></a></h3><p>以下配置是针对子应用的，它们是可选的，建议根据实际情况选择设置。</p><h4 id="_1、开启umd模式-优化内存和性能" tabindex="-1"><a class="header-anchor" href="#_1、开启umd模式-优化内存和性能"><span>1、开启umd模式，优化内存和性能</span></a></h4><p>MicroApp支持两种渲染微前端的模式，默认模式和umd模式。</p><ul><li><strong>默认模式：</strong> 子应用在初次渲染和后续渲染时会顺序执行所有js，以保证多次渲染的一致性。</li><li><strong>umd模式：</strong> 子应用暴露出<code>mount</code>、<code>unmount</code>方法，此时只在初次渲染时执行所有js，后续渲染只会执行这两个方法，在多次渲染时具有更好的性能和内存表现。</li></ul><p>如果子应用渲染和卸载不频繁，那么使用默认模式即可，如果子应用渲染和卸载非常频繁建议使用umd模式。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// index.js</span>
<span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span>
<span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">&quot;react-dom&quot;</span>
<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">&#39;./App&#39;</span>

<span class="token comment">// 👇 将渲染操作放入 mount 函数，子应用初始化时会自动执行</span>
window<span class="token punctuation">.</span><span class="token function-variable function">mount</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;root&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 👇 将卸载操作放入 unmount 函数，就是上面步骤2中的卸载函数</span>
window<span class="token punctuation">.</span><span class="token function-variable function">unmount</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  ReactDOM<span class="token punctuation">.</span><span class="token function">unmountComponentAtNode</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;root&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 如果不在微前端环境，则直接执行mount渲染</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>window<span class="token punctuation">.</span>__MICRO_APP_ENVIRONMENT__<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  window<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2、设置-webpack-jsonpfunction" tabindex="-1"><a class="header-anchor" href="#_2、设置-webpack-jsonpfunction"><span>2、设置 webpack.jsonpFunction</span></a></h4><p>如果微前端正常运行，可以忽略这一步。</p><p>如果子应用资源加载混乱导致渲染失败，可以尝试设置<code>jsonpFunction</code>来解决，因为相同的<code>jsonpFunction</code>名称会导致资源污染。</p><p>这种情况常见于主应用和子应用都是通过<code>create-react-app</code>等脚手架创建的项目。</p><p><strong>解决方式：修改子应用的webpack配置</strong></p>`,31),m=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js","data-title":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token comment"},"// webpack.config.js"),s(`
module`),n("span",{class:"token punctuation"},"."),s("exports "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token literal-property property"},"output"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token operator"},"..."),s(`
    `),n("span",{class:"token literal-property property"},"jsonpFunction"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token template-string"},[n("span",{class:"token template-punctuation string"},"`"),n("span",{class:"token string"},"webpackJsonp_自定义名称"),n("span",{class:"token template-punctuation string"},"`")]),n("span",{class:"token punctuation"},","),s(`
    `),n("span",{class:"token literal-property property"},"globalObject"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'window'"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),v=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js","data-title":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token comment"},"// webpack.config.js"),s(`
module`),n("span",{class:"token punctuation"},"."),s("exports "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token literal-property property"},"output"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token operator"},"..."),s(`
    `),n("span",{class:"token literal-property property"},"chunkLoadingGlobal"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'webpackJsonp_自定义名称'"),n("span",{class:"token punctuation"},","),s(`
    `),n("span",{class:"token literal-property property"},"globalObject"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'window'"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),b=n("h4",{id:"_3、设置-publicpath",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3、设置-publicpath"},[n("span",null,"3、设置 publicPath")])],-1),h=n("p",null,[s("如果子应用出现静态资源地址404(js、css、图片)，建议设置"),n("code",null,"publicPath"),s("来尝试解决这个问题。")],-1),g=n("code",null,"publicPath",-1),_={href:"https://webpack.docschina.org/guides/public-path/#on-the-fly",target:"_blank",rel:"noopener noreferrer"},f=o(`<p><strong>步骤1:</strong> 在子应用src目录下创建名称为<code>public-path.js</code>的文件，并添加如下内容</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// __MICRO_APP_ENVIRONMENT__和__MICRO_APP_PUBLIC_PATH__是由micro-app注入的全局变量</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>__MICRO_APP_ENVIRONMENT__<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// eslint-disable-next-line</span>
  __webpack_public_path__ <span class="token operator">=</span> window<span class="token punctuation">.</span>__MICRO_APP_PUBLIC_PATH__
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>步骤2:</strong> 在子应用入口文件的<strong>最顶部</strong>引入<code>public-path.js</code></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// entry</span>
<span class="token keyword">import</span> <span class="token string">&#39;./public-path&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4、切换到iframe沙箱" tabindex="-1"><a class="header-anchor" href="#_4、切换到iframe沙箱"><span>4、切换到iframe沙箱</span></a></h4><p>MicroApp有两种沙箱方案：<code>with沙箱</code>和<code>iframe沙箱</code>。</p><p>默认开启with沙箱，如果with沙箱无法正常运行，可以尝试切换到iframe沙箱。</p><h2 id="常见问题" tabindex="-1"><a class="header-anchor" href="#常见问题"><span>常见问题</span></a></h2><p>无</p>`,9);function w(j,x){const p=e("CodeGroupItem"),c=e("CodeGroup"),i=e("ExternalLinkIcon");return r(),u("div",null,[k,a(c,null,{default:t(()=>[a(p,{title:"webpack4"},{default:t(()=>[m]),_:1}),a(p,{title:"webpack5"},{default:t(()=>[v]),_:1})]),_:1}),b,h,n("p",null,[g,s("是webpack提供的功能，它可以补全静态资源的地址，详情参考webpack文档 "),n("a",_,[s("publicPath"),a(i)])]),f])}const P=l(d,[["render",w],["__file","react.html.vue"]]);export{P as default};
