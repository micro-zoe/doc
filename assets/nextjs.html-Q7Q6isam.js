import{_ as p,r as o,o as c,c as i,d as n,e as s,b as t,a as e}from"./app-Js4EkCke.js";const l={},r=e(`<h1 id="nextjs" tabindex="-1"><a class="header-anchor" href="#nextjs"><span>Nextjs</span></a></h1><p>本篇以<code>nextjs 11</code>作为案例介绍nextjs的接入方式，其它版本nextjs接入方式会在后续补充，如果你在使用时出现问题，请在github上提issue告知我们。</p><h2 id="作为基座应用" tabindex="-1"><a class="header-anchor" href="#作为基座应用"><span>作为基座应用</span></a></h2><h4 id="_1、安装依赖" tabindex="-1"><a class="header-anchor" href="#_1、安装依赖"><span>1、安装依赖</span></a></h4><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> i @micro-zoe/micro-app <span class="token parameter variable">--save</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2、引入micro-app" tabindex="-1"><a class="header-anchor" href="#_2、引入micro-app"><span>2、引入micro-app</span></a></h4><p>因为webComponent只能运行在浏览器环境，所以我们在<code>pages/_app.jsx</code>的<code>useEffect</code>中进行初始化。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// pages/_app.jsx</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>
<span class="token keyword">import</span> microApp <span class="token keyword">from</span> <span class="token string">&#39;@micro-zoe/micro-app&#39;</span>

<span class="token keyword">function</span> <span class="token function">MyApp</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> Component<span class="token punctuation">,</span> pageProps <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 初始化micro-app</span>
    microApp<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token doc-comment comment">/**
     * BUG FIX
     * 在nextjs 11下，子应用内部跳转，基座无法监听，导致点击浏览器前进、后退按钮，无法回退到正确的子应用页面
     * 通过监听popstate事件，在地址变化时重新替换为next路由来解决这个问题
     */</span>
    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;popstate&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> <span class="token punctuation">{</span> href<span class="token punctuation">,</span> origin <span class="token punctuation">}</span> <span class="token operator">=</span> window<span class="token punctuation">.</span>location
      router<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>href<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>origin<span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token operator">&lt;</span>Component <span class="token punctuation">{</span><span class="token operator">...</span>pageProps<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> MyApp
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3、设置动态路由" tabindex="-1"><a class="header-anchor" href="#_3、设置动态路由"><span>3、设置动态路由</span></a></h4><p>通过<code>pages/my-page/[[...]].js</code>设置动态路由，以确保<code>/my-page/*</code> 都指向当前页面。</p>`,10),u={href:"https://nextjs.org/docs/routing/dynamic-routes#optional-catch-all-routes",target:"_blank",rel:"noopener noreferrer"},d=e(`<h4 id="_4、在页面中嵌入子应用" tabindex="-1"><a class="header-anchor" href="#_4、在页面中嵌入子应用"><span>4、在页面中嵌入子应用</span></a></h4><p>如上所述，micro-app只能运行在浏览器环境，所以在<code>useEffect</code>中通过变量控制子应用显示。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// pages/my-page/[[...]].js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>

<span class="token keyword">const</span> <span class="token function-variable function">MyPage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>show<span class="token punctuation">,</span> changeShow<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>

  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">changeShow</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>子应用<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>
      <span class="token punctuation">{</span>
        show <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>
          <span class="token operator">&lt;</span>micro<span class="token operator">-</span>app
            name<span class="token operator">=</span><span class="token string">&#39;app1&#39;</span> <span class="token comment">// name(必传)：应用名称</span>
            url<span class="token operator">=</span><span class="token string">&#39;http://localhost:3000/&#39;</span> <span class="token comment">// url(必传)：应用地址，会被自动补全为http://localhost:3000/index.html</span>
            baseroute<span class="token operator">=</span><span class="token string">&#39;/my-page&#39;</span> <span class="token comment">// baseroute(可选)：基座应用分配给子应用的基础路由，就是上面的 \`/my-page\`</span>
          <span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>micro<span class="token operator">-</span>app<span class="token operator">&gt;</span>
        <span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> MyPage
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="作为子应用" tabindex="-1"><a class="header-anchor" href="#作为子应用"><span>作为子应用</span></a></h2><h4 id="_1、在基座应用中添加ssr配置" tabindex="-1"><a class="header-anchor" href="#_1、在基座应用中添加ssr配置"><span>1、在基座应用中添加ssr配置</span></a></h4><p>当子应用是ssr应用时，基座需要在micro-app元素上添加ssr属性，此时micro-app会根据ssr模式加载子应用。</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>micro-app</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>xx<span class="token punctuation">&#39;</span></span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>xx<span class="token punctuation">&#39;</span></span> <span class="token attr-name">ssr</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>micro-app</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>基座应用不需要设置baseroute属性，因为ssr子应用无法使用。</p><h4 id="_2、设置跨域支持" tabindex="-1"><a class="header-anchor" href="#_2、设置跨域支持"><span>2、设置跨域支持</span></a></h4>`,9),k={href:"https://nextjs.org/docs/advanced-features/custom-server",target:"_blank",rel:"noopener noreferrer"},v=e(`<p><strong>步骤1、在根目录创建<code>server.js</code></strong></p><p><code>server.js</code>的内容如下：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// server.js</span>
<span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> next <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;next&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./next.config&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">PORT</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token number">3000</span>
<span class="token keyword">const</span> dev <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">!==</span> <span class="token string">&#39;production&#39;</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">{</span> dev <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> handle <span class="token operator">=</span> app<span class="token punctuation">.</span><span class="token function">getRequestHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> server <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token comment">// 设置跨域支持</span>
  server<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&#39;access-control-allow-origin&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token function">handle</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&gt; Ready on http://localhost:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>port<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>config<span class="token punctuation">.</span>basePath<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>步骤2、修改<code>package.json</code>中的<code>scripts</code>，如下：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token string-property property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token string-property property">&quot;dev&quot;</span><span class="token operator">:</span> <span class="token string">&quot;node server.js&quot;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;next build&quot;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;start&quot;</span><span class="token operator">:</span> <span class="token string">&quot;cross-env NODE_ENV=production node server.js&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3、设置基础路由" tabindex="-1"><a class="header-anchor" href="#_3、设置基础路由"><span>3、设置基础路由</span></a></h4><p>nextjs的基础路由只能在<code>next.config.js</code>中通过<code>basePath</code>写死，无法像SPA应用一样灵活配置。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// next.config.js</span>
<span class="token keyword">const</span> basePath <span class="token operator">=</span> <span class="token string">&#39;基础路由，与基座分配的路由地址一致&#39;</span><span class="token punctuation">,</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  basePath<span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4、设置assetprefix-和-publicruntimeconfig" tabindex="-1"><a class="header-anchor" href="#_4、设置assetprefix-和-publicruntimeconfig"><span>4、设置<code>assetPrefix</code> 和 <code>publicRuntimeConfig</code></span></a></h4><p>在<code>next.config.js</code>中设置<code>assetPrefix</code>，为静态资源添加路径前缀，避免子应用的静态资源使用相对地址时加载失败的情况。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// next.config.js</span>
<span class="token comment">// 基础路由</span>
<span class="token keyword">const</span> basePath <span class="token operator">=</span> <span class="token string">&#39;基础路由，与基座分配的路由地址一致&#39;</span><span class="token punctuation">,</span>
<span class="token comment">// 静态资源路径前缀</span>
<span class="token keyword">const</span> assetPrefix <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">&#39;production&#39;</span> <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">线上域名</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>basePath<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> <span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">http://localhost:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">PORT</span> <span class="token operator">||</span> <span class="token number">3000</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>basePath<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  basePath<span class="token punctuation">,</span>
  assetPrefix<span class="token punctuation">,</span>
  <span class="token comment">// 添加 assetPrefix 地址到 publicRuntimeConfig</span>
  <span class="token literal-property property">publicRuntimeConfig</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    assetPrefix<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>assetPrefix</code>只对js、css等静态资源生效，对本地图片无效。</p><p>为此我们将<code>assetPrefix</code>作为参数传入<code>publicRuntimeConfig</code>，开发者需要手动通过<code>publicRuntimeConfig</code>补全图片地址。</p><p>方式如下：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> getConfig <span class="token keyword">from</span> <span class="token string">&#39;next/config&#39;</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> publicRuntimeConfig <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">getConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> <span class="token function-variable function">Page</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>publicRuntimeConfig<span class="token punctuation">.</span>assetPrefix<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/local-img.png</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> Page
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5、监听卸载" tabindex="-1"><a class="header-anchor" href="#_5、监听卸载"><span>5、监听卸载</span></a></h4><p>子应用被卸载时会接受到一个名为<code>unmount</code>的事件，在此可以进行卸载相关操作。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 监听卸载操作</span>
window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;unmount&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 执行卸载相关操作</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container note"><p class="custom-container-title">Note</p><p>nextjs默认支持css module功能，如果你使用了此功能，建议关闭样式隔离以提升性能：<code>&lt;micro-app name=&#39;xx&#39; url=&#39;xx&#39; disableScopecss&gt;&lt;/micro-app&gt;</code></p></div><h2 id="实战案例" tabindex="-1"><a class="header-anchor" href="#实战案例"><span>实战案例</span></a></h2><p>以上介绍了nextjs如何接入微前端，但在实际使用中会涉及更多功能，如数据通信、路由跳转、打包部署，为此我们提供了一套案例，用于展示nextjs作为基座嵌入(或作为子应用被嵌入) react、vue、angular、vite、nextjs、nuxtjs等框架，在案例中我们使用尽可能少的代码实现尽可能多的功能。</p><p>案例地址：https://github.com/micro-zoe/micro-app-demo-0.x</p><h2 id="常见问题" tabindex="-1"><a class="header-anchor" href="#常见问题"><span>常见问题</span></a></h2><h4 id="_1、使用next-image组件加载图片失败" tabindex="-1"><a class="header-anchor" href="#_1、使用next-image组件加载图片失败"><span>1、使用<code>next/image</code>组件加载图片失败</span></a></h4><p><strong>解决方式：</strong></p><p>在部分nextjs版本中(如：nextjs 11)，使用<code>next/image</code>组件无法正确引入图片，此时推荐使用img元素代替。</p><h4 id="_2、无法预加载ssr子应用" tabindex="-1"><a class="header-anchor" href="#_2、无法预加载ssr子应用"><span>2、无法预加载ssr子应用</span></a></h4><p><strong>原因：</strong> 因为ssr应用每个路由地址加载的html、js、css等静态资源都不同，所以无法对ssr子应用使用预加载。</p><h4 id="_3、控制台报错cannot-read-properties-of-null-reading-tagname" tabindex="-1"><a class="header-anchor" href="#_3、控制台报错cannot-read-properties-of-null-reading-tagname"><span>3、控制台报错<code>Cannot read properties of null (reading &#39;tagName&#39;)</code></span></a></h4><p><strong>原因：</strong> 当基座和子应用都是nextjs应用时，<code>next/head</code>组件冲突。</p><p><strong>解决方式：</strong> 去掉子应用中<code>next/head</code>组件。</p><h4 id="_4、webpack-jsonpfunction冲突-导致加载子应用失败" tabindex="-1"><a class="header-anchor" href="#_4、webpack-jsonpfunction冲突-导致加载子应用失败"><span>4、webpack.jsonpFunction冲突，导致加载子应用失败</span></a></h4><p><strong>原因：</strong> 当基座和子应用都是官方脚手架创建的项目，容易造成webpack.jsonpFunction冲突。</p><p><strong>解决方式：</strong> 修改子应用的webpack配置。</p><p><code>jsonpFunction</code>是webpack4中的名称，在webpack5中名称为<code>chunkLoadingGlobal</code>，请根据自己项目的webpack版本设置。</p><p>在<code>next.config.js</code>中配置webpack：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// next.config.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">webpack</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>output<span class="token punctuation">,</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">chunkLoadingGlobal</span><span class="token operator">:</span> <span class="token string">&#39;webpackJsonp_child_app&#39;</span><span class="token punctuation">,</span> <span class="token comment">// webpack5</span>
      <span class="token comment">// jsonpFunction: &#39;webpackJsonp_child_app&#39;, // webpack4</span>
      <span class="token literal-property property">globalObject</span><span class="token operator">:</span> <span class="token string">&#39;window&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> config
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,37),m={class:"custom-container tip"},b=n("p",{class:"custom-container-title"},"提示",-1),g={href:"https://github.com/micro-zoe/micro-app/issues/168",target:"_blank",rel:"noopener noreferrer"};function h(f,x){const a=o("ExternalLinkIcon");return c(),i("div",null,[r,n("p",null,[s("详情参考："),n("a",u,[s("optional-catch-all-routes"),t(a)])]),d,n("p",null,[s("通过自定义服务设置跨域访问，详情参考 "),n("a",k,[s("custom-server"),t(a)])]),v,n("div",m,[b,n("p",null,[s("nextjs相关问题可以在"),n("a",g,[s("nextjs专属讨论贴"),t(a)]),s("下反馈。")])])])}const w=p(l,[["render",h],["__file","nextjs.html.vue"]]);export{w as default};
