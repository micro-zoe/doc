import{_ as p,r as o,o as c,c as l,d as n,e as a,b as e,a as t}from"./app-Js4EkCke.js";const i={},u=n("h2",{id:"_1、我需要用到微前端吗",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1、我需要用到微前端吗"},[n("span",null,"1、我需要用到微前端吗？")])],-1),r={href:"https://www.yuque.com/kuitos/gky7yw/gesexv",target:"_blank",rel:"noopener noreferrer"},d=t(`<p>相比于iframe，微前端拥有更好的用户体验，同时它也要求开发者对于前端框架和路由原理具有一定的理解。</p><p>微前端的本质是将两个不相关的页面强行合并为一，这其中不可避免会出现各种冲突，虽然微前端框架解决了几乎所有的冲突，但偶尔也会有特殊情况出现，这需要开发者具有处理特殊情况的能力和心态。</p><p>微前端不是万能的，它的实现原理注定无法像iframe一样简单稳定。</p><p>如果你不知道自己是否需要用微前端，那么大概率是不需要。</p><h2 id="_2、子应用一定要支持跨域吗" tabindex="-1"><a class="header-anchor" href="#_2、子应用一定要支持跨域吗"><span>2、子应用一定要支持跨域吗？</span></a></h2><p>是的！</p><p>如果是开发环境，可以在webpack-dev-server中设置headers支持跨域。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&#39;Access-Control-Allow-Origin&#39;</span><span class="token operator">:</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),k={href:"https://segmentfault.com/a/1190000012550346",target:"_blank",rel:"noopener noreferrer"},m=n("h2",{id:"_3、兼容性如何",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3、兼容性如何"},[n("span",null,"3、兼容性如何")])],-1),v=n("p",null,"micro-app依赖于CustomElements和Proxy两个较新的API。",-1),b={href:"https://github.com/webcomponents/polyfills/tree/master/packages/custom-elements",target:"_blank",rel:"noopener noreferrer"},h=n("p",null,"但是Proxy暂时没有做兼容，所以对于不支持Proxy的浏览器无法运行micro-app。",-1),f={href:"https://caniuse.com/?search=Proxy",target:"_blank",rel:"noopener noreferrer"},_=t(`<p>总体如下：</p><ul><li>PC端：除了IE浏览器，其它浏览器基本兼容。</li><li>移动端：ios10+、android5+</li></ul><h2 id="_4、micro-app-报错-an-app-named-xx-already-exists" tabindex="-1"><a class="header-anchor" href="#_4、micro-app-报错-an-app-named-xx-already-exists"><span>4、micro-app 报错 an app named xx already exists</span></a></h2><p>这是<code>name</code>名称冲突导致的，请确保每个子应用的<code>name</code>值是唯一的。</p><h2 id="_5、主应用的样式影响到子应用" tabindex="-1"><a class="header-anchor" href="#_5、主应用的样式影响到子应用"><span>5、主应用的样式影响到子应用</span></a></h2><p>虽然我们将子应用的样式进行隔离，但主应用的样式依然会影响到子应用，如果发生冲突，推荐通过约定前缀或CSS Modules方式解决。</p><p>如果你使用的是<code>ant-design</code>等组件库，一般会提供添加前缀进行样式隔离的功能。</p><h2 id="_6、子应用在沙箱环境中如何获取到外部真实window" tabindex="-1"><a class="header-anchor" href="#_6、子应用在沙箱环境中如何获取到外部真实window"><span>6、子应用在沙箱环境中如何获取到外部真实window？</span></a></h2><p>目前有3种方式在子应用中获取外部真实window</p><ul><li>1、new Function(&quot;return window&quot;)() 或 Function(&quot;return window&quot;)()</li><li>2、(0, eval)(&#39;window&#39;)</li><li>3、window.rawWindow</li></ul><h2 id="_7、错误信息-xxx-undefined" tabindex="-1"><a class="header-anchor" href="#_7、错误信息-xxx-undefined"><span>7、错误信息：xxx undefined</span></a></h2><p><strong>包括：</strong></p><ul><li><code>xxx is not defined</code></li><li><code>xxx is not a function</code></li><li><code>Cannot read properties of undefined</code></li></ul><p><strong>原因：</strong></p><p>在微前端的沙箱环境中，顶层变量不会泄漏为全局变量。</p><p>例如在正常情况下，通过 var name 或 function name () {} 定义的顶层变量会泄漏为全局变量，通过window.name或name就可以全局访问。</p><p>但是在沙箱环境下这些顶层变量无法泄漏为全局变量，window.name或name为undefined，导致出现问题。</p><p><strong>解决方式</strong>：</p><p><em>方式一：手动修改</em></p><p>将 var name 或 function name () {} 修改为 window.name = xx</p><p><em>方式二：通过插件系统修改子应用代码</em></p><p>比如常见的加载webpack打包的dll文件失败的问题，因为dll文件的内容和js地址相对固定，可以直接进行全局查找和修改。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>microApp<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">modules</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">应用名称</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
        <span class="token function">loader</span><span class="token punctuation">(</span><span class="token parameter">code<span class="token punctuation">,</span> url</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>url <span class="token operator">===</span> <span class="token string">&#39;xxx.js&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            code <span class="token operator">=</span> code<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&#39;var xx_dll=&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;window.xx_dll=&#39;</span><span class="token punctuation">)</span>
          <span class="token punctuation">}</span>
          <span class="token keyword">return</span> code
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8、jsonp请求如何处理" tabindex="-1"><a class="header-anchor" href="#_8、jsonp请求如何处理"><span>8、jsonp请求如何处理？</span></a></h2>`,24),g={href:"/zh/configure#ignore-%E5%BF%BD%E7%95%A5%E5%85%83%E7%B4%A0",target:"_blank",rel:"noopener noreferrer"},x=t(`<h2 id="_9、子应用通过a标签下载文件失败" tabindex="-1"><a class="header-anchor" href="#_9、子应用通过a标签下载文件失败"><span>9、子应用通过a标签下载文件失败</span></a></h2><p><strong>原因：</strong> 当跨域时(主应用和文件在不同域名下)，无法通过a标签的download属性实现下载。</p><p><strong>解决方式：</strong></p><p><strong>方式1：</strong> 转换为blob形式下载</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>xxx.png<span class="token punctuation">&#39;</span></span> <span class="token attr-name">download</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>filename.png<span class="token punctuation">&quot;</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>downloadFile<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span>下载<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 通过blob下载文件</span>
<span class="token keyword">function</span> <span class="token function">downloadFile</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 微前端环境下转换为blob下载，子应用单独运行时依然使用a标签下载</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>__MICRO_APP_ENVIRONMENT__<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">// 注意href必须是绝对地址</span>
    <span class="token function">fetch</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>href<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      res<span class="token punctuation">.</span><span class="token function">blob</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">blob</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> blobUrl <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>blob<span class="token punctuation">)</span>
        <span class="token comment">// 转化为blobURL后再通过a标签下载</span>
        <span class="token keyword">const</span> a <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span>
        a<span class="token punctuation">.</span>href <span class="token operator">=</span> blobUrl
        a<span class="token punctuation">.</span>download <span class="token operator">=</span> <span class="token string">&#39;filename.png&#39;</span>
        a<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        window<span class="token punctuation">.</span><span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">revokeObjectURL</span><span class="token punctuation">(</span>blobUrl<span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>方式2：</strong> 将文件放到主应用域名下，判断微前端环境下a标签href属性设置为主应用的文件地址</p>`,7);function w(y,j){const s=o("ExternalLinkIcon");return c(),l("div",null,[u,n("p",null,[a("在此之前建议你先阅读"),n("a",r,[a("Why Not Iframe"),e(s)]),a("。")]),d,n("p",null,[a("如果是线上环境，可以通过"),n("a",k,[a("配置nginx"),e(s)]),a("支持跨域。")]),m,v,n("p",null,[a("对于不支持CustomElements的浏览器，可以通过引入polyfill进行兼容，详情可参考："),n("a",b,[a("webcomponents/polyfills"),e(s)]),a("。")]),h,n("p",null,[a("浏览器兼容性可以查看："),n("a",f,[a("Can I Use"),e(s)])]),_,n("p",null,[a("参考"),n("a",g,[a("ignore"),e(s)])]),x])}const q=p(i,[["render",w],["__file","questions.html.vue"]]);export{q as default};
